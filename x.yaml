---
# Source: repman/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.10
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: example-minio
---
# Source: repman/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: example-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
---
# Source: repman/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: example-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.10
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-user: "YWRtaW4="
  root-password: "U2xVMENpdmVEaA=="
---
# Source: repman/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: example-repman
  labels:
    helm.sh/chart: repman-3.0.0
    app.kubernetes.io/name: repman
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
type: Opaque
stringData:
  APP_SECRET: S2IxVEtTQTNUY3I5b21jUlJ1NXN0SkxXejRqUFB5b2s=
  MAILER_DSN: '{{ .Values.config.mailer.dsn }}'
  MAILER_SENDER: '{{ .Values.config.mailer.sender }}'
  OAUTH_BITBUCKET_CLIENT_ID: '{{ .Values.config.oauth.bitbucket.id }}'
  OAUTH_BITBUCKET_CLIENT_SECRET: '{{ .Values.config.oauth.bitbucket.secret }}'
  OAUTH_BUDDY_CLIENT_ID: '{{ .Values.config.oauth.buddy.id }}'
  OAUTH_BUDDY_CLIENT_SECRET: '{{ .Values.config.oauth.buddy.secret }}'
  OAUTH_GITHUB_CLIENT_ID: '{{ .Values.config.oauth.github.id }}'
  OAUTH_GITHUB_CLIENT_SECRET: '{{ .Values.config.oauth.github.secret }}'
  OAUTH_GITLAB_CLIENT_ID: '{{ .Values.config.oauth.gitlab.id }}'
  OAUTH_GITLAB_CLIENT_SECRET: '{{ .Values.config.oauth.gitlab.secret }}'
---
# Source: repman/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: repman/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: repman/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: repman/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-repman-files
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
data:
  nginx.conf: |-
    user nginx;
    worker_processes auto;
  
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
  
    events {
        worker_connections 1024;
    }
  
    http {
        server_tokens off;
        fastcgi_read_timeout 300;
        client_max_body_size 200M;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '$upstream_response_time';
  
        access_log  /var/log/nginx/access.log  main;
  
        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 2048;
  
        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;
  
        server {
            listen       80;
            listen       [::]:80;
            server_name _;
            root /app/public;
  
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
  
            location / {
                try_files $uri /index.php$is_args$args;
            }
  
            location ~ ^/index\.php(/|$) {
                fastcgi_split_path_info ^(.+\.php)(/.*)$;
                fastcgi_pass localhost:9000;
                fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                fastcgi_param DOCUMENT_ROOT $realpath_root;
                include fastcgi_params;
                internal;
            }
        }
    }
  php-overrides.ini: |-
    session.save_path=tcp://example-redis:6379
    date.timezone="Europe/Warsaw"
    opcache.interned_strings_buffer=16
    opcache.max_accelerated_files=10000
    opcache.memory_consumption=256
    opcache.validate_timestamps=1
    session.save_handler="redis"
  services_prod_yaml: |-
    parameters:
      aws_s3_region: '%env(STORAGE_AWS_REGION)%'
      aws_s3_default_endpoint: 'https://s3.%aws_s3_region%.amazonaws.com'
    services:
      Aws\S3\S3Client:
        lazy: true
        arguments:
        - version: 'latest'
          region: '%aws_s3_region%'
          endpoint: '%env(default:aws_s3_default_endpoint:STORAGE_AWS_ENDPOINT)%'
          use_path_style_endpoint: '%env(bool:STORAGE_AWS_PATH_STYLE_ENDPOINT)%'
          credentials:
            key: '%env(STORAGE_AWS_KEY)%'
            secret: '%env(STORAGE_AWS_SECRET)%'
---
# Source: repman/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: example-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.10
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "50Gi"
---
# Source: repman/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: example-repman-public
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
  annotations:
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
---
# Source: repman/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: example-repman-var
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
  annotations:
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "4Gi"
---
# Source: repman/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.10
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: example
---
# Source: repman/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: example
---
# Source: repman/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: example
    app.kubernetes.io/component: master
---
# Source: repman/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-repman
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: example
    app.kubernetes.io/name: repman
    role: app
---
# Source: repman/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.1.10
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: example
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-12.1.10
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 2ed60fa1530d3e11921d53e7d2fdb004653bb10b4f8534fbedc95a0938b8f62f
    spec:
      
      serviceAccountName: example-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: example
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.2.27-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: example-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: example-minio
                  key: root-password
            - name: MINIO_DEFAULT_BUCKETS
              value: repman
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: example-minio
---
# Source: repman/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-repman
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
    role: app
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: repman
      role: app
  template:
    metadata:
      annotations:
        
        checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/name: repman
        role: app
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        []
      containers:
        - name: example-repman
          image: "buddy/repman:1.4.0"
          imagePullPolicy: IfNotPresent
          
          env:
            - name: APP_ALLOWED_PACKAGE_TYPES
              value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
            - name: APP_DEBUG
              value: "0"
            - name: APP_ENV
              value: prod
            - name: APP_GITLAB_API_URL
              value: https://gitlab.com
            - name: APP_HOST
              value: example.com
            - name: APP_URL_SCHEME
              value: http
            - name: DATABASE_DATABASE
              value: repman
            - name: DATABASE_HOSTNAME
              value: repman-example-postgresql-pooler
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: EWZ_RECAPTCHA_ENABLED
              value: "false"
            - name: EWZ_RECAPTCHA_SECRET
              value: none
            - name: EWZ_RECAPTCHA_SITE_KEY
              value: none
            - name: MESSENGER_TRANSPORT_DSN
              value: doctrine://default
            - name: PACKAGES_DIST_DIR
              value: var/repo
            - name: PROXY_DIST_DIR
              value: var/proxy
            - name: SECURITY_ADVISORIES_DB_DIR
              value: var/security-advisories
            - name: STORAGE_AWS_BUCKET
              value: repman
            - name: STORAGE_AWS_ENDPOINT
              value: http://example-minio:9000
            - name: STORAGE_AWS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: example-minio
            - name: STORAGE_AWS_OPAQUE_AUTH
              value: "true"
            - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
              value: "true"
            - name: STORAGE_AWS_REGION
              value: us-east-1
            - name: STORAGE_AWS_SECRET
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: example-minio
            - name: STORAGE_SOURCE
              value: storage.s3
            - name: TRUSTED_PROXIES
              value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          envFrom:
            - secretRef:
                name: example-repman
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: php-overrides
              mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
              subPath: php-overrides.ini
            - name: public
              mountPath: /app/public
            - name: services-prod
              mountPath: /app/config/services_prod.yaml
              readOnly: true
            - name: var
              mountPath: /var
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
        - image: nginx:1.23.1-alpine
          name: nginx
          volumeMounts:
          - mountPath: /app/public
            name: public
            readOnly: true
          - mountPath: /etc/nginx/conf.d/default.conf
            name: nginx
            subPath: nginx.conf
      volumes:
        - name: nginx
          configMap:
            name: example-repman-files
        - name: php-overrides
          configMap:
            name: example-repman-files
        - name: public
          persistentVolumeClaim:
            claimName: example-repman-public
        - name: services-prod
          configMap:
            name: example-repman-files
        - name: var
          persistentVolumeClaim:
            claimName: example-repman-var
---
# Source: repman/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-repman-consumers
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
    role: consumers
spec:
  revisionHistoryLimit: 
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: example
      app.kubernetes.io/name: repman
      role: consumers
  template:
    metadata:
      annotations:
        
        checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/name: repman
        role: consumers
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        []
      containers:
        - name: example-repman-consumers
          image: "buddy/repman:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
              
            - sh
            - -c
            - |
              set -xeuo pipefail
              bin/console messenger:consume async --limit=100 -vv
          
          env:
            - name: APP_ALLOWED_PACKAGE_TYPES
              value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
            - name: APP_DEBUG
              value: "0"
            - name: APP_ENV
              value: prod
            - name: APP_GITLAB_API_URL
              value: https://gitlab.com
            - name: APP_HOST
              value: example.com
            - name: APP_URL_SCHEME
              value: http
            - name: DATABASE_DATABASE
              value: repman
            - name: DATABASE_HOSTNAME
              value: repman-example-postgresql-pooler
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: EWZ_RECAPTCHA_ENABLED
              value: "false"
            - name: EWZ_RECAPTCHA_SECRET
              value: none
            - name: EWZ_RECAPTCHA_SITE_KEY
              value: none
            - name: MESSENGER_TRANSPORT_DSN
              value: doctrine://default
            - name: PACKAGES_DIST_DIR
              value: var/repo
            - name: PROXY_DIST_DIR
              value: var/proxy
            - name: SECURITY_ADVISORIES_DB_DIR
              value: var/security-advisories
            - name: STORAGE_AWS_BUCKET
              value: repman
            - name: STORAGE_AWS_ENDPOINT
              value: http://example-minio:9000
            - name: STORAGE_AWS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: example-minio
            - name: STORAGE_AWS_OPAQUE_AUTH
              value: "true"
            - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
              value: "true"
            - name: STORAGE_AWS_REGION
              value: us-east-1
            - name: STORAGE_AWS_SECRET
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: example-minio
            - name: STORAGE_SOURCE
              value: storage.s3
            - name: TRUSTED_PROXIES
              value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          envFrom:
            - secretRef:
                name: example-repman
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: php-overrides
              mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
              subPath: php-overrides.ini
            - name: services-prod
              mountPath: /app/config/services_prod.yaml
              readOnly: true
            - name: var
              mountPath: /var
          
      volumes:
        - name: nginx
          configMap:
            name: example-repman-files
        - name: php-overrides
          configMap:
            name: example-repman-files
        - name: services-prod
          configMap:
            name: example-repman-files
        - name: var
          persistentVolumeClaim:
            claimName: example-repman-var
---
# Source: repman/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.8.3
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: example
      app.kubernetes.io/component: master
  serviceName: example-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.8.3
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 1969695d7fb2581e2c81b2952bbe0df4d621093cc9c2adb3fe3e3d8a218b91c2
        checksum/health: ed65b85e7f800deb3d768bcf81daaddc7823c15b5d15746f2c3b83dc8878a9ea
        checksum/scripts: f0717e05f6e3ecfc52ec9499656ba0cde7a2ba2999c388c3619fc98ab7dd0182
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: example-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: example
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.9-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: example-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: example-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: example-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: example
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: repman/templates/common.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: example-repman-install
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: example-repman-install
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: repman
        app.kubernetes.io/version: 1.4.0
        helm.sh/chart: repman-3.0.0
      annotations:
        
        checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
    spec:
      restartPolicy: OnFailure
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        []
      containers:
        - name: example-repman-install
          image: "buddy/repman:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
              
            - sh
            - -c
            - |
              set -euo pipefail
              bin/console d:m:m --no-interaction
              bin/console messenger:setup-transports --no-interaction
              bin/console assets:install --env=prod --no-interaction
          
          env:
            - name: APP_ALLOWED_PACKAGE_TYPES
              value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
            - name: APP_DEBUG
              value: "0"
            - name: APP_ENV
              value: prod
            - name: APP_GITLAB_API_URL
              value: https://gitlab.com
            - name: APP_HOST
              value: example.com
            - name: APP_URL_SCHEME
              value: http
            - name: DATABASE_DATABASE
              value: repman
            - name: DATABASE_HOSTNAME
              value: repman-example-postgresql-pooler
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
            - name: EWZ_RECAPTCHA_ENABLED
              value: "false"
            - name: EWZ_RECAPTCHA_SECRET
              value: none
            - name: EWZ_RECAPTCHA_SITE_KEY
              value: none
            - name: MESSENGER_TRANSPORT_DSN
              value: doctrine://default
            - name: PACKAGES_DIST_DIR
              value: var/repo
            - name: PROXY_DIST_DIR
              value: var/proxy
            - name: SECURITY_ADVISORIES_DB_DIR
              value: var/security-advisories
            - name: STORAGE_AWS_BUCKET
              value: repman
            - name: STORAGE_AWS_ENDPOINT
              value: http://example-minio:9000
            - name: STORAGE_AWS_KEY
              valueFrom:
                secretKeyRef:
                  key: root-user
                  name: example-minio
            - name: STORAGE_AWS_OPAQUE_AUTH
              value: "true"
            - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
              value: "true"
            - name: STORAGE_AWS_REGION
              value: us-east-1
            - name: STORAGE_AWS_SECRET
              valueFrom:
                secretKeyRef:
                  key: root-password
                  name: example-minio
            - name: STORAGE_SOURCE
              value: storage.s3
            - name: TRUSTED_PROXIES
              value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          envFrom:
            - secretRef:
                name: example-repman
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: php-overrides
              mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
              subPath: php-overrides.ini
            - name: public
              mountPath: /app/public
            - name: services-prod
              mountPath: /app/config/services_prod.yaml
              readOnly: true
            - name: var
              mountPath: /var
          
      volumes:
        - name: nginx
          configMap:
            name: example-repman-files
        - name: php-overrides
          configMap:
            name: example-repman-files
        - name: public
          persistentVolumeClaim:
            claimName: example-repman-public
        - name: services-prod
          configMap:
            name: example-repman-files
        - name: var
          persistentVolumeClaim:
            claimName: example-repman-var
---
# Source: repman/templates/common.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "example-repman-cronjob-package-clear-old-dists"
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
spec:
  concurrencyPolicy: "Forbid"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  schedule: "0 1 * * *"
  jobTemplate:
    metadata:
      name: "example-repman-cronjob-package-clear-old-dists"
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: repman
        app.kubernetes.io/version: 1.4.0
        helm.sh/chart: repman-3.0.0
    spec:
      template:
        metadata:
          name: example-repman-cronjob-package-clear-old-dists
          labels:
            app.kubernetes.io/instance: example
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: repman
            app.kubernetes.io/version: 1.4.0
            helm.sh/chart: repman-3.0.0
          annotations:
            
            checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
        spec:
          restartPolicy: Never
          
          serviceAccountName: default
          automountServiceAccountToken: true
          dnsPolicy: ClusterFirst
          enableServiceLinks: true
          initContainers:
            []
          containers:
            - name: example-repman-cronjob-package-clear-old-dists
              image: "buddy/repman:1.4.0"
              imagePullPolicy: IfNotPresent
              command:
                  
                - sh
                - -c
                - |
                  set -euo pipefail
                  /app/bin/console "repman:package:clear-old-dists"
              
              env:
                - name: APP_ALLOWED_PACKAGE_TYPES
                  value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
                - name: APP_DEBUG
                  value: "0"
                - name: APP_ENV
                  value: prod
                - name: APP_GITLAB_API_URL
                  value: https://gitlab.com
                - name: APP_HOST
                  value: example.com
                - name: APP_URL_SCHEME
                  value: http
                - name: DATABASE_DATABASE
                  value: repman
                - name: DATABASE_HOSTNAME
                  value: repman-example-postgresql-pooler
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: EWZ_RECAPTCHA_ENABLED
                  value: "false"
                - name: EWZ_RECAPTCHA_SECRET
                  value: none
                - name: EWZ_RECAPTCHA_SITE_KEY
                  value: none
                - name: MESSENGER_TRANSPORT_DSN
                  value: doctrine://default
                - name: PACKAGES_DIST_DIR
                  value: var/repo
                - name: PROXY_DIST_DIR
                  value: var/proxy
                - name: SECURITY_ADVISORIES_DB_DIR
                  value: var/security-advisories
                - name: STORAGE_AWS_BUCKET
                  value: repman
                - name: STORAGE_AWS_ENDPOINT
                  value: http://example-minio:9000
                - name: STORAGE_AWS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: root-user
                      name: example-minio
                - name: STORAGE_AWS_OPAQUE_AUTH
                  value: "true"
                - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
                  value: "true"
                - name: STORAGE_AWS_REGION
                  value: us-east-1
                - name: STORAGE_AWS_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: root-password
                      name: example-minio
                - name: STORAGE_SOURCE
                  value: storage.s3
                - name: TRUSTED_PROXIES
                  value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
              envFrom:
                - secretRef:
                    name: example-repman
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
              volumeMounts:
                - name: php-overrides
                  mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
                  subPath: php-overrides.ini
                - name: services-prod
                  mountPath: /app/config/services_prod.yaml
                  readOnly: true
                - name: var
                  mountPath: /var
              
          volumes:
            - name: nginx
              configMap:
                name: example-repman-files
            - name: php-overrides
              configMap:
                name: example-repman-files
            - name: services-prod
              configMap:
                name: example-repman-files
            - name: var
              persistentVolumeClaim:
                claimName: example-repman-var
---
# Source: repman/templates/common.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "example-repman-cronjob-security-update-db"
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
spec:
  concurrencyPolicy: "Forbid"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  schedule: "0 */2 * * *"
  jobTemplate:
    metadata:
      name: "example-repman-cronjob-security-update-db"
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: repman
        app.kubernetes.io/version: 1.4.0
        helm.sh/chart: repman-3.0.0
    spec:
      template:
        metadata:
          name: example-repman-cronjob-security-update-db
          labels:
            app.kubernetes.io/instance: example
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: repman
            app.kubernetes.io/version: 1.4.0
            helm.sh/chart: repman-3.0.0
          annotations:
            
            checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
        spec:
          restartPolicy: Never
          
          serviceAccountName: default
          automountServiceAccountToken: true
          dnsPolicy: ClusterFirst
          enableServiceLinks: true
          initContainers:
            []
          containers:
            - name: example-repman-cronjob-security-update-db
              image: "buddy/repman:1.4.0"
              imagePullPolicy: IfNotPresent
              command:
                  
                - sh
                - -c
                - |
                  set -euo pipefail
                  /app/bin/console "repman:security:update-db"
              
              env:
                - name: APP_ALLOWED_PACKAGE_TYPES
                  value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
                - name: APP_DEBUG
                  value: "0"
                - name: APP_ENV
                  value: prod
                - name: APP_GITLAB_API_URL
                  value: https://gitlab.com
                - name: APP_HOST
                  value: example.com
                - name: APP_URL_SCHEME
                  value: http
                - name: DATABASE_DATABASE
                  value: repman
                - name: DATABASE_HOSTNAME
                  value: repman-example-postgresql-pooler
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: EWZ_RECAPTCHA_ENABLED
                  value: "false"
                - name: EWZ_RECAPTCHA_SECRET
                  value: none
                - name: EWZ_RECAPTCHA_SITE_KEY
                  value: none
                - name: MESSENGER_TRANSPORT_DSN
                  value: doctrine://default
                - name: PACKAGES_DIST_DIR
                  value: var/repo
                - name: PROXY_DIST_DIR
                  value: var/proxy
                - name: SECURITY_ADVISORIES_DB_DIR
                  value: var/security-advisories
                - name: STORAGE_AWS_BUCKET
                  value: repman
                - name: STORAGE_AWS_ENDPOINT
                  value: http://example-minio:9000
                - name: STORAGE_AWS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: root-user
                      name: example-minio
                - name: STORAGE_AWS_OPAQUE_AUTH
                  value: "true"
                - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
                  value: "true"
                - name: STORAGE_AWS_REGION
                  value: us-east-1
                - name: STORAGE_AWS_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: root-password
                      name: example-minio
                - name: STORAGE_SOURCE
                  value: storage.s3
                - name: TRUSTED_PROXIES
                  value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
              envFrom:
                - secretRef:
                    name: example-repman
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
              volumeMounts:
                - name: php-overrides
                  mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
                  subPath: php-overrides.ini
                - name: services-prod
                  mountPath: /app/config/services_prod.yaml
                  readOnly: true
                - name: var
                  mountPath: /var
              
          volumes:
            - name: nginx
              configMap:
                name: example-repman-files
            - name: php-overrides
              configMap:
                name: example-repman-files
            - name: services-prod
              configMap:
                name: example-repman-files
            - name: var
              persistentVolumeClaim:
                claimName: example-repman-var
---
# Source: repman/templates/common.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "example-repman-cronjob-telemetry-send"
  labels:
    app.kubernetes.io/instance: example
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: repman
    app.kubernetes.io/version: 1.4.0
    helm.sh/chart: repman-3.0.0
spec:
  concurrencyPolicy: "Forbid"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  schedule: "0 0 * * *"
  jobTemplate:
    metadata:
      name: "example-repman-cronjob-telemetry-send"
      labels:
        app.kubernetes.io/instance: example
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: repman
        app.kubernetes.io/version: 1.4.0
        helm.sh/chart: repman-3.0.0
    spec:
      template:
        metadata:
          name: example-repman-cronjob-telemetry-send
          labels:
            app.kubernetes.io/instance: example
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: repman
            app.kubernetes.io/version: 1.4.0
            helm.sh/chart: repman-3.0.0
          annotations:
            
            checksum/config: 58f05db2bcc0cc0e0f57a5d3ba83ec1b2f305fca45f93503ebc9dbcb6f3de58f
        spec:
          restartPolicy: Never
          
          serviceAccountName: default
          automountServiceAccountToken: true
          dnsPolicy: ClusterFirst
          enableServiceLinks: true
          initContainers:
            []
          containers:
            - name: example-repman-cronjob-telemetry-send
              image: "buddy/repman:1.4.0"
              imagePullPolicy: IfNotPresent
              command:
                  
                - sh
                - -c
                - |
                  set -euo pipefail
                  /app/bin/console "repman:telemetry:send"
              
              env:
                - name: APP_ALLOWED_PACKAGE_TYPES
                  value: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
                - name: APP_DEBUG
                  value: "0"
                - name: APP_ENV
                  value: prod
                - name: APP_GITLAB_API_URL
                  value: https://gitlab.com
                - name: APP_HOST
                  value: example.com
                - name: APP_URL_SCHEME
                  value: http
                - name: DATABASE_DATABASE
                  value: repman
                - name: DATABASE_HOSTNAME
                  value: repman-example-postgresql-pooler
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: repman.repman-example-postgresql.credentials.postgresql.acid.zalan.do
                - name: EWZ_RECAPTCHA_ENABLED
                  value: "false"
                - name: EWZ_RECAPTCHA_SECRET
                  value: none
                - name: EWZ_RECAPTCHA_SITE_KEY
                  value: none
                - name: MESSENGER_TRANSPORT_DSN
                  value: doctrine://default
                - name: PACKAGES_DIST_DIR
                  value: var/repo
                - name: PROXY_DIST_DIR
                  value: var/proxy
                - name: SECURITY_ADVISORIES_DB_DIR
                  value: var/security-advisories
                - name: STORAGE_AWS_BUCKET
                  value: repman
                - name: STORAGE_AWS_ENDPOINT
                  value: http://example-minio:9000
                - name: STORAGE_AWS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: root-user
                      name: example-minio
                - name: STORAGE_AWS_OPAQUE_AUTH
                  value: "true"
                - name: STORAGE_AWS_PATH_STYLE_ENDPOINT
                  value: "true"
                - name: STORAGE_AWS_REGION
                  value: us-east-1
                - name: STORAGE_AWS_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: root-password
                      name: example-minio
                - name: STORAGE_SOURCE
                  value: storage.s3
                - name: TRUSTED_PROXIES
                  value: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
              envFrom:
                - secretRef:
                    name: example-repman
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
              volumeMounts:
                - name: php-overrides
                  mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
                  subPath: php-overrides.ini
                - name: services-prod
                  mountPath: /app/config/services_prod.yaml
                  readOnly: true
                - name: var
                  mountPath: /var
              
          volumes:
            - name: nginx
              configMap:
                name: example-repman-files
            - name: php-overrides
              configMap:
                name: example-repman-files
            - name: services-prod
              configMap:
                name: example-repman-files
            - name: var
              persistentVolumeClaim:
                claimName: example-repman-var
---
# Source: repman/templates/pgsql.yaml
apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  labels:
    team: repman
    helm.sh/chart: repman-3.0.0
    app.kubernetes.io/name: repman
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  name: repman-example-postgresql
spec:
  allowedSourceRanges: []
  enableConnectionPooler: true
  numberOfInstances: 1
  postgresql:
    version: "14"
  resources: 
    limits:
      cpu: 500m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 1Gi
  teamId: repman
  users:
    repman: []
  volume: 
    size: 10Gi
  preparedDatabases:
    repman:
