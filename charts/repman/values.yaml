image:
  repository: buddy/repman
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

controller:
  strategy: RollingUpdate
  rollingUpdate:
    unavailable: 0
    surge: 1
  labels:
    role: app
  selectorLabels:
    role: app
  additionalContainers:
    nginx:
      image: nginx:1.23.1-alpine
      volumeMounts:
      - name: public
        mountPath: /app/public
        readOnly: true
      - name: nginx
        mountPath: /etc/nginx/conf.d/default.conf
        subPath: nginx.conf

additionalControllers:
  consumers:
    enabled: true
    type: deployment
    labels:
      role: consumers
    selectorLabels:
      role: consumers
    command:
    - sh
    - -c
    - |
      set -xeuo pipefail
      bin/console messenger:consume async --limit=100 -vv
    persistence:
      public:
        enabled: false
  install:
    enabled: false
    type: job
    annotations:
      "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    restartPolicy: OnFailure
    command: &install_command
    - sh
    - -c
    - |
      set -euo pipefail
      bin/console d:m:m --no-interaction
      bin/console messenger:setup-transports --no-interaction
      bin/console assets:install --env=prod --no-interaction
  upgrade:
    enabled: false
    type: job
    annotations:
      "helm.sh/hook": pre-upgrade
      "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    restartPolicy: OnFailure
    command: *install_command
  create-admin:
    enabled: false
    type: job
    annotations:
      "helm.sh/hook": post-install
      "helm.sh/hook-weight": "-5"
      "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    restartPolicy: OnFailure
    command:
    - sh
    - -c
    - |
      set -euo pipefail
      bin/console repman:create:admin -n {{ .Values.createAdmin.email | quote }} {{ .Values.createAdmin.password | quote }}


config:
  defaultHostname: example.com
  scheme: http
  allowedPackageTypes: git,github,gitlab,bitbucket,subversion,mercurial,pear,artifact,path
  gitlabApiUrl: https://gitlab.com
  mailer:
    # ... or set it directly here to create one
    dsn: ""
    sender: ""
  oauth:
    # ... or set it directly here to create one
    github:
      id: ""
      secret: ""
    gitlab:
      id: ""
      secret: ""
    bitbucket:
      id: ""
      secret: ""
    buddy:
      id: ""
      secret: ""

# Only executed during first install
createAdmin:
  enabled: false
  email: admin@example.com
  password: admin123

cronJobs:
  - name: proxy-sync-releases
    command: repman:proxy:sync-releases
    schedule: "*/5 * * * *"
    enabled: true
  - name: proxy-sync-metadata
    command: repman:proxy:sync-metadata
    schedule: "*/6 * * * *"
    enabled: true
  - name: security-update-db
    command: repman:security:update-db
    schedule: "0 */2 * * *"
    enabled: true
  - name: telemetry-send
    command: repman:telemetry:send
    schedule: "0 0 * * *"
    enabled: true
  - name: package-clear-old-dists
    command: repman:package:clear-old-dists
    schedule: "0 1 * * *"
    enabled: true

env:
  APP_HOST: "{{ .Values.config.defaultHostname }}"
  APP_URL_SCHEME: "{{ .Values.config.scheme }}"
  APP_ALLOWED_PACKAGE_TYPES: "{{ .Values.config.allowedPackageTypes }}"
  APP_GITLAB_API_URL: "{{ .Values.config.gitlabApiUrl }}"
  APP_ENV: prod
  APP_DEBUG: "0"
  MESSENGER_TRANSPORT_DSN: doctrine://default
  EWZ_RECAPTCHA_ENABLED: "false"
  EWZ_RECAPTCHA_SITE_KEY: none
  EWZ_RECAPTCHA_SECRET: none
  PROXY_DIST_DIR: var/proxy
  PACKAGES_DIST_DIR: var/repo
  SECURITY_ADVISORIES_DB_DIR: var/security-advisories
  STORAGE_SOURCE: storage.s3
  STORAGE_AWS_OPAQUE_AUTH: "true"
  TRUSTED_PROXIES: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16

  DATABASE_HOSTNAME: '{{ include "repman.names.postgresql-hostname" . }}'
  DATABASE_USER:
    valueFrom:
      secretKeyRef:
        name: &pgsqlSecretName '{{ .Values.postgresql.user }}.{{ include "repman.names.postgresql" . }}.credentials.postgresql.acid.zalan.do'
        key: username
  DATABASE_PASSWORD:
    valueFrom:
      secretKeyRef:
        name: *pgsqlSecretName
        key: password
  DATABASE_DATABASE: "{{ .Values.postgresql.database }}"
  DATABASE_VERSION: "{{ .Values.postgresql.version }}"

  STORAGE_AWS_BUCKET: "{{ .Values.minio.defaultBuckets }}"
  STORAGE_AWS_REGION: "us-east-1"
  STORAGE_AWS_KEY:
    valueFrom:
      secretKeyRef:
         name: '{{ include "common.names.releasename" . }}-minio'
         key: root-user
  STORAGE_AWS_SECRET:
    valueFrom:
      secretKeyRef:
         name: '{{ include "common.names.releasename" . }}-minio'
         key: root-password
  STORAGE_AWS_PATH_STYLE_ENDPOINT: "true"
  STORAGE_AWS_ENDPOINT: '{{ (printf "http://%s-minio:9000" (include "common.names.releasename" .) )}}'

secret:
  OAUTH_GITHUB_CLIENT_ID: "{{ .Values.config.oauth.github.id }}"
  OAUTH_GITHUB_CLIENT_SECRET: "{{ .Values.config.oauth.github.secret }}"
  OAUTH_GITLAB_CLIENT_ID: "{{ .Values.config.oauth.gitlab.id }}"
  OAUTH_GITLAB_CLIENT_SECRET: "{{ .Values.config.oauth.gitlab.secret }}"
  OAUTH_BITBUCKET_CLIENT_ID: "{{ .Values.config.oauth.bitbucket.id }}"
  OAUTH_BITBUCKET_CLIENT_SECRET: "{{ .Values.config.oauth.bitbucket.secret }}"
  OAUTH_BUDDY_CLIENT_ID: "{{ .Values.config.oauth.buddy.id }}"
  OAUTH_BUDDY_CLIENT_SECRET: "{{ .Values.config.oauth.buddy.secret }}"
  MAILER_DSN: "{{ .Values.config.mailer.dsn }}"
  MAILER_SENDER: "{{ .Values.config.mailer.sender }}"

configmap:
  files:
    enabled: true
    data: {} # Data is set from _setup.tpl

service:
  main:
    selectorLabels:
      role: app
    ports:
      http:
        port: 80

ingress:
  main:
    enabled: false

persistence:
  public:
    enabled: true
    type: pvc
    storageClass: # You propably need to set one for ReadWriteMany
    accessMode: ReadWriteMany
    size: 1Gi
    mountPath: /app/public
  var:
    enabled: true
    type: pvc
    storageClass: # You propably need to set one for ReadWriteMany
    accessMode: ReadWriteMany
    size: 4Gi
    mountPath: /var
  services-prod:
    enabled: true
    mountPath: /app/config/services_prod.yaml
    subPath: services_prod.yaml
    readOnly: true
    type: configMap
    name: '{{ include "common.names.fullname" . }}-files'
  nginx:
    enabled: true
    mountPath: /etc/nginx/conf.d/default.conf
    subPath: nginx.conf
    readOnly: true
    type: configMap
    name: '{{ include "common.names.fullname" . }}-files'
    autoMount: false
  php-overrides:
    enabled: true
    type: configMap
    mountPath: /usr/local/etc/php/conf.d/php-overrides.ini
    name: '{{ include "common.names.fullname" . }}-files'
    subPath: php-overrides.ini

phpConfig:
  opcache.memory_consumption: 256
  opcache.interned_strings_buffer: 16
  opcache.max_accelerated_files: 10000
  opcache.validate_timestamps: 1
  date.timezone: Europe/Warsaw
  session.save_handler: redis
autoscaling:
  main:
    enabled: false
    target:
    minReplicas: 2
    maxReplicas: 16
    targetCPUUtilizationPercentage: 50
  consumers:
    enabled: false
    target: consumers
    minReplicas: 1
    maxReplicas: 32
    targetCPUUtilizationPercentage: 10

postgresql:
  enabled: true
  version: 14
  user: repman
  database: repman
  instances: 1
  team: repman
  connectionPooler: true
  resources:
    limits:
      cpu: 500m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 1Gi
  volume:
    size: 10Gi
  parameters:
    huge_pages: "off"

minio:
  enabled: true
  # bultiple buckets not suported!
  defaultBuckets: repman
  persistence:
    size: 50Gi

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
